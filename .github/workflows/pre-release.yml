name: Prepare Release

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    environment: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.GH_TOKEN }}

      - name: Add third-party repository for PHP
        run: |
          if ! grep -q "^deb .*/ondrej/php" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
            sudo add-apt-repository -y ppa:ondrej/php
            sudo apt-get update
          fi

      - name: Install PHP 8.3 and Composer
        run: |
          if ! php -v | grep -q "PHP 8.3"; then
            sudo apt-get install -y php8.3-cli php8.3-xml
            sudo update-alternatives --set php /usr/bin/php8.3
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php composer-setup.php --install-dir=/usr/local/bin --filename=composer
            php -r "unlink('composer-setup.php');"
          fi

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --no-dev --prefer-dist --optimize-autoloader --no-progress

      - name: Prepare Git config
        run: |
          git config --local user.email "durianbohong@gmail.com"
          git config --local user.name "il4mb"

      - name: Get Last Non-Pre-Release Tag
        id: last-release-tag
        run: |
          # Fetch all tags and filter for non-pre-release tags
          non_pre_release_tags=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname)
  
          # Get the last non-pre-release tag
          last_non_pre_release_tag=$(echo "$non_pre_release_tags" | head -n 1)
  
          if [ -z "$last_non_pre_release_tag" ]; then
            # If no non-pre-release tags found, get the last pre-release tag
            last_pre_release_tag=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*-rc.*' --sort=-v:refname | head -n 1)
            
            if [ -z "$last_pre_release_tag" ]; then
              # If no tags found at all, create the initial version
              new_tag="v0.0.1"
            else
              # Extract major, minor, and patch components from the last pre-release tag
              IFS='.' read -r major minor patch rc_number <<< "$last_pre_release_tag"
              # Remove the -rc suffix
              new_tag="v$major.$minor.$patch"
            fi
          else
            # Extract major, minor, and patch components from the last non-pre-release tag
            IFS='.' read -r major minor patch <<< "$last_non_pre_release_tag"
            # Increment the patch version
            incremented_patch=$((patch + 1))
            new_tag="v$major.$minor.$incremented_patch"
          fi
  
          echo "Last non-pre-release tag: $last_non_pre_release_tag"
          echo "New tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"

      - name: Set environment variable
        run: echo "NEW_TAG=${{ steps.last-release-tag.outputs.new_tag }}" >> $GITHUB_ENV

      - name: Display new tag
        run: echo "New tag is $NEW_TAG"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: "Release ${{ env.NEW_TAG }}"
          draft: false
          prerelease: false
          body: "Release with vendor files included."

      - name: Push vendor directory to release branch
        run: |
          git checkout -b release || git checkout release
          git add -f vendor
          git commit -m "Include vendor directory for release" || echo "No changes to commit"
          git push origin release

  cleanup:
    runs-on: ubuntu-latest
    needs: prepare-release
    if: always()
    env:
      BRANCH_NAME: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Git prepare
        run: |
          git config --local user.email "durianbohong@gmail.com"
          git config --local user.name "il4mb"
          git checkout main
          git pull origin main

      - name: Remove vendor directory from release branch
        run: |
          git checkout release
          git rm -r --cached vendor
          git commit -m "Remove vendor directory from release branch" || echo "No changes to commit"
          git push origin release

      - name: Remove release branch
        run: |
          git push origin --delete release
