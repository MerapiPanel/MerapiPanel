{% extends "@panel/base.html.twig" %}


{% block stylesheet %}
{{parent()}}
<link rel="stylesheet" href="{{ '@FileManager/dist/filemanager.css' | assets }}">
{% endblock %}

{% set directory = request.directory %}



{% block header_title %}File Manager{% endblock %}

{% block breadcrumb_item %}
<a class="breadcrumb-item" href="?directory="><i class="fa-solid fa-house"></i></a>
{% if directory %}
{% set paths = directory | split('/') %}
{% set link = "" %}
{% for key, item in paths %}
{% set link = link ~ "/" ~ item %}
<a class="breadcrumb-item" href="?directory={{ link | trim('/') }}">{{ item }}</a>
{% endfor %}
{% endif %}
{% endblock %}


{% block subheader_menu %}
<li class="menu-item btn" onclick="createFolder('{{ directory }}')"><i class="fa-solid fa-folder-plus"></i> new folder
</li>
<li class="menu-item btn" onclick="uploadFile()"><i class="fa-solid fa-file-arrow-up"></i> upload file</li>
{% endblock %}







{% block content %}

{% if container.type == 'navigate' %}


<div class="fm-container" id="container-filemanager">
    {% if container.data | length > 0 %}
    {% for key, item in container.data %}
    <div data-fm-key="{{ key }}" class="fm-file">

        <div class="fm-file-content mb-1" data-bs-toggle="collapse" data-bs-target="#collapse-{{ item.path | preg_replace('/[^a-z0-9]+/mi', "-") }}">
            <div class="fm-file-icon">
                {% if item.icon is iterable %}
                <img {% if item.icon.scale=="scale-down" %}width="35px" height="35px" {% endif %}
                    class="rounded overflow-hidden img-{{ item.icon.scale }}" src="{{ item.icon.src }}" />
                {% else %}
                <div class="h-full w-full flex items-center justify-center"><i
                        class="fa-solid {{ item.icon }} fa-2x"></i>
                </div>
                {% endif %}
            </div>
            <div class="fm-file-info">
                <span class="file-name">{{ item.name }}</span>
            </div>

            <button class="ms-auto btn btn-sm" type="button" data-bs-toggle="collapse"
                data-bs-target="#collapse-{{ item.path | preg_replace('/[^a-z0-9]+/mi', "-") }}" aria-expanded="false"
                aria-controls="collapse-{{ item.path | preg_replace('/[^a-z0-9]+/mi', "-") }}">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                    class="bi bi-chevron-down" viewBox="0 0 16 16">
                    <path fill-rule="evenodd"
                        d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708" />
                </svg>
            </button>
        </div>


        {% set contentType = item.type == "directory" ? "directory" : "file" %}
        {% set contentFile = item.path %}

        <div class="collapse" id="collapse-{{ item.path | preg_replace('/[^a-z0-9]+/mi', "-") }}">
            <div class="card card-body">
                <a type="button" class="btn btn-sm btn-outline-secondary" 
                href="?directory={{ item.path }}">
                    <i class="w-[20px] opacity-70 text-center fa-solid fa-up-right-from-square"></i>
                    Open {% if item.type == "directory" %}folder{% else %}file{% endif %}
                </a>
                <a type="button" class="btn btn-sm btn-outline-secondary" onclick="infoFile('{{ key }}')">
                    <i class="w-[20px] opacity-70 text-center fa-solid fa-info"></i> File info
                </a>
                <a type="button" class="btn btn-sm btn-outline-secondary"
                    onclick="renameFile({ file: '{{ contentFile }}', name: '{{ item.name }}', type: '{{ contentType }}' })">
                    <i class="w-[20px] opacity-70 text-center fa-solid fa-pen"></i> Rename
                </a>
                <a type="button" class="btn btn-sm btn-outline-secondary"
                    onclick="deleteFile({ file: '{{ contentFile }}', type: '{{ contentType }}' })">
                    <i class="w-[20px] opacity-70 text-center fa-solid fa-trash"></i> Delete
                </a>
            </div>
        </div>
    </div>
    {% endfor %}
    {% else %}
    <div class="d-flex justify-content-center align-items-center vh-75 w-100" id="filemanager-directory-empty">
        <div class="text-center">
            <div class="opacity-50 p-5"><i class="fa-regular fa-folder-open fa-6x"></i></div>
            <h2 class="text-3xl font-bold">Directory Empty</h2>
        </div>
    </div>
    {% endif %}
</div>


{% else %}

{% set contentType = container.data.mime == "directory" ? "directory" : "file" %}
{% set contentFile = container.data.path.relative %}

<div class="file-container">
    {% if "image" in container.data.mime %}

    <img class="p-8 w-full max-h-[75vh] object-contain" src="{{ container.data.path.full }}"
        alt="{{ container.data.name }}">

    {% elseif "video" in container.data.mime %}

    <video class="w-full max-h-[75vh] object-contain" src="{{ container.data.path.full }}" controls></video>

    {% else %}

    <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-center text-white">
        <h1 class="text-3xl font-bold">File Type Not Supported to View</h1>
        <p>{{ container.data.mime }}</p>
        <div class="py-5">
            <a class="btn btn-primary" href="{{ container.data.path.full }}" target="_blank"
                download="{{ container.data.name }}">Click Here to Download</a>
        </div>
    </div>

    {% endif %}

    <div class="absolute right-2 top-0 z-20">
        <div class="dropdown">
            <button data-act-trigger="dropdown" class="dropdown-toggle text-white hover:text-black">
                <i class="fa-solid fa-ellipsis"></i>
            </button>
            <ul class="dropdown-menu">
                <li class="dropdown-item">
                    <a type="button" href="javascript: copyToClipboard('{{ container.data.path.full }}')">
                        <i class="w-[20px] text-center fa-regular fa-copy"></i> Copy Link
                    </a>
                </li>
                <li class="dropdown-item">
                    <a type="button" href="{{ container.data.path.full }}" target="_blank"
                        download="{{ container.data.name }}">
                        <i class="w-[20px] text-center fa-solid fa-cloud-arrow-down"></i> Download
                    </a>
                </li>
                <li class="dropdown-item">
                    <a type="button"
                        href="javascript: infoFile({ name: '{{ container.data.name }}', path: '{{ contentFile }}', size: '{{ container.data.size }}', time: '{{ container.data.time }}', type: '{{ container.data.mime }}'})">
                        <i class="w-[20px] text-center fa-solid fa-info"></i> File Info
                    </a>
                </li>
                <li class="dropdown-item">
                    <a type="button"
                        href="javascript: renameFile({ file: '{{ contentFile }}', name: '{{ container.data.name }}', type: '{{ contentType }}' })">
                        <i class="w-[20px] text-center fa-solid fa-pen"></i> Rename
                    </a>
                </li>
                <li class="dropdown-item text-red-500 bg-red-600/20">
                    <a type="button"
                        href="javascript: deleteFile({ file: '{{contentFile}}', type: '{{contentType}}' }, true)">
                        <i class="w-[20px] text-center fa-solid fa-delete-left"></i> Delete
                    </a>
                </li>

            </ul>
        </div>
    </div>

</div>

{% endif %}
{% endblock %}


{% block javascript %}

<script src="{{ '@filemanager/dist/filemanager.js' | assets }}"></script>
<script>


    merapi.FileManager.setContainer("{{ container | json_encode }}");

    function createFolder(parent) {

        merapi.FileManager.createFolder({
            parent: parent,
            endpoint: "{{ 'filemanager/create_folder' | url_path }}"
        }).then((result) => {
            window.location.reload();
        })
    }

    function deleteFile(args, popback = false) {
        const opts = Object.assign({ file: null, type: 'directory', endpoint: "{{ 'filemanager/delete_file' | url_path }}" }, args);
        merapi.FileManager.deleteFile(opts).then((result) => {
            if (popback) {
                const urlObj = new URL(window.location.href);
                const directoryParam = urlObj.searchParams.get('directory');
                if (directoryParam) {
                    let pathSegments = directoryParam.split('/');
                    pathSegments.pop();
                    let newPath = pathSegments.join('/');
                    urlObj.searchParams.set('directory', newPath);
                    window.location.href = urlObj.toString();
                }
            } else {
                window.location.reload();
            }
        })
    }

    function renameFile(args) {
        const opts = Object.assign({ file: null, name: null, type: 'directory', endpoint: "{{ 'filemanager/rename_file' | url_path }}" }, args);
        // console.log(opts)
        merapi.FileManager.renameFile(opts).then((result) => {
            const urlObj = new URL(window.location.href);
            const directoryParam = urlObj.searchParams.get('directory');
            if (directoryParam) {
                if (directoryParam == opts.file && result.data.new_path) {
                    urlObj.searchParams.set('directory', result.data.new_path);
                    window.location.href = urlObj.toString();
                } else {
                    window.location.reload();
                }
            } else {
                window.location.reload();
            }
        })
    }

    function infoFile(x) {
        merapi.FileManager.infoFile(x);
    }

    function uploadFile() {
        merapi.FileManager.uploadFile({
            parent: "{{ directory }}",
            endpoint: "{{ 'filemanager/upload_file' | url_path }}",
        });
    }

    function copyToClipboard(text) {


        if (text.charAt(0) === '/') text = text.substring(1);
        const urlObject = new URL(`${window.location.protocol}//${window.location.hostname}/${text}`);
        const url = urlObject.toString();

        // Use the modern Clipboard API if available
        if (navigator.clipboard) {
            navigator.clipboard.writeText(url)
                .then(() => {
                    window.merapi.toast("Link copied to clipboard", 5, "text-success");
                    //console.log(window.merapi.toast)
                })
                .catch(err => {
                    window.merapi.toast('Failed to copy link', 5, 'text-danger');
                });
        } else {
            // Fallback to the older method for browsers that don't support the Clipboard API
            var textArea = document.createElement("textarea");
            textArea.value = url;

            // Avoid scrolling to bottom
            textArea.style.top = "0";
            textArea.style.left = "0";
            textArea.style.position = "fixed";

            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();

            try {
                var successful = document.execCommand('copy');
                var msg = successful ? 'successful' : 'unsuccessful';
                window.merapi.toast(msg + " copied to clipboard", 5, successful ? "text-success" : "text-danger");
            } catch (err) {
                window.merapi.toast(err, 5, 'text-danger');
            }
            document.body.removeChild(textArea);
        }
    }
</script>
{% endblock %}