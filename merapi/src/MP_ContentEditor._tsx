import React, { StrictMode } from 'react';
import { createRoot } from "react-dom/client";
import { Editor } from 'grapesjs';
import { Layout, LayoutRow, RootEditor, Canvas, Components } from "@il4mb/merapipanel";

const MP_Editor = () => {

    const config = {
        deviceManager: {
            devices: [{
                name: 'Desktop',
                width: ''
            }, {
                name: 'Tablet',
                width: '768px'
            }, {
                name: 'Mobile',
                width: '320px'
            }]
        },
    }

    const onReadyHandle = (editor: Editor) => {

        editor.Commands.add('set-device-desktop', {
            run: editor => editor.setDevice('Desktop'),
            stop: () => { }
        });
        editor.Commands.add('set-device-tablet', {
            run: editor => editor.setDevice('Tablet'),
            stop: () => { }
        });
        editor.Commands.add('set-device-mobile', {
            run: editor => editor.setDevice('Mobile'),
            stop: () => { }
        });



        editor.Commands.add('sw-layers-toggle', {
            run: (editor: Editor) => {
                document.getElementById("container-layers")?.classList.remove('hide');
                document.getElementById("left-group")?.classList.remove('hide');
            },
            stop: () => {
                document.getElementById("container-layers")?.classList.add('hide');
                document.getElementById("left-group")?.classList.add('hide');
            }
        });

        editor.Commands.add("sw-blocks-toggle", {
            run: (editor: Editor) => {
                document.getElementById("container-blocks")?.classList.remove('hide');
                document.getElementById("left-group")?.classList.remove('hide');
            },
            stop: () => {
                document.getElementById("container-blocks")?.classList.add('hide');
                document.getElementById("left-group")?.classList.add('hide');
            }
        });


        editor.Commands.add("sw-traits", {
            run: (editor: Editor) => {

            }
        });

        editor.select(editor.getWrapper());
    }

    return (
        <RootEditor onReady={onReadyHandle} config={config}>

            <Layout className='layout-top'>

                <Components.Panel id='panel-top-left'>
                    <Components.Button id='visibility' className='border' command='sw-visibility' active >
                        <Components.Icons.VisibilityIcon />
                    </Components.Button>
                    <Components.Button id='export' className='border' command='export-template' context='export-template' >
                        <Components.Icons.CodeIcon />
                    </Components.Button>
                    <Components.Button id='layers-toggle' className='border' command='sw-layers-toggle' context='left-panel' >
                        <Components.Icons.LayersIcon />
                    </Components.Button>
                    <Components.Button id='blocks-toggle' className='border' command='sw-blocks-toggle' context='left-panel' >
                        <Components.Icons.GridFillIcon />
                    </Components.Button>
                </Components.Panel>

                <Components.Panel id='panel-top-center'>
                    <Components.Button id='device-desktop' command='set-device-desktop' togglable={false} active>
                        <Components.Icons.DesktopIcon />
                    </Components.Button>
                    <Components.Button id='device-tablet' command='set-device-tablet' togglable={false}>
                        <Components.Icons.TabletIcon />
                    </Components.Button>
                    <Components.Button id='device-mobile' command='set-device-mobile' togglable={false}>
                        <Components.Icons.MobileIcon />
                    </Components.Button>
                </Components.Panel>

                <Components.Panel id='panel-top-right'>

                </Components.Panel>

            </Layout>

            <LayoutRow>

                <Layout className='layout-left hide' id='left-group'>
                    {/* <Components.Containers.LayersContainer id='container-layers' />
                    <Components.Containers.BlocksContainer id='container-blocks' >

                    </Components.Containers.BlocksContainer> */}
                </Layout>

                <Canvas>
                    <h1>Canvas</h1>
                    <div className="image-container">
                        <img src="https://picsum.photos/200/300" alt="Random Image" />
                    </div>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptas amet quia atque sunt,
                        maiores ducimus, earum non minus provident quas dolores. Modi neque nostrum
                        aut nihil dolorem reiciendis officia ab!</p>
                </Canvas>

                <Layout className='layout-right'>

                    {/* <Components.Containers.SelectedContainer /> */}

                    <Components.Panel id='panel-style' className='panel-group'>

                        <Components.Button id='btn-style'
                            active
                            togglable={false}
                            command={{
                                run: (editor: Editor) => {
                                    (document.getElementById('container-styles') as any).style.display = '';
                                },
                                stop: () => {
                                    (document.getElementById('container-styles') as any).style.display = 'none';
                                }
                            }}  >
                            <Components.Icons.StyleIcon />
                        </Components.Button>

                        <Components.Button id='btn-traits'
                            togglable={false}
                            command={{
                                run: (editor: Editor) => {
                                    (document.getElementById('container-traits') as any).style.display = '';
                                },
                                stop: () => {
                                    (document.getElementById('container-traits') as any).style.display = 'none';
                                }
                            }} >
                            <Components.Icons.TraitsIcon />
                        </Components.Button>

                    </Components.Panel>

                    {/* <Components.Containers.StylesContainer id='container-styles' />
                    <Components.Containers.TraitsContainer id='container-traits' /> */}

                </Layout>
            </LayoutRow>

            <Components.Breadcrumb />
            <Components.LoadingScreen />
        </RootEditor>
    )
};



const root = createRoot(document.getElementById('root') as HTMLElement);

root.render(
    <StrictMode>
        <MP_Editor />
    </StrictMode>
)