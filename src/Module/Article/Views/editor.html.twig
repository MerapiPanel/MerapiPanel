{% extends "@panel/base.html.twig" %}
{% block header_title %}New Content{% endblock %}

{% block head_javascript %}
{{ parent() }}
<script src="{{ '@article/assets/dist/editor.js' | assets }}"></script>
{% endblock %}

{% block stylesheet %}
{{ parent() }}
<style>
    html,
    body {
        max-width: 100vw;
        overflow-x: hidden;
    }

    #editor *[placeholder]:empty:after {
        content: attr(placeholder);
        opacity: .5;
    }

    #editor .ce-settings svg {
        stroke-width: 0px;
    }

    .content-sidebar {
        transition: .5s;
        height: 100%;
    }

    @media screen and (max-width: 1024px) {
        .content-sidebar {
            position: absolute;
            top: 0;
            right: 0;
            z-index: 100;
            height: 100%;
            overflow: hidden;
            max-width: 350px;
            width: 100%;
        }

        .content-sidebar.close {
            max-width: 0px;
            padding: 0;
        }
    }
</style>
{% endblock %}


{% set categories = admin.article_category.fetchAll %}
{% set options = admin.article_options %}



{% block content %}

<div class="row">

    <div class="col-12 col-lg-8">
        <div id="editor" class="h-auto border-0 bg-white p-4 my-4 rounded-sm mx-auto max-w-[860px] min-h-screen"></div>
    </div>

    <div class="col-12 col-lg-4">
        <div class="flex flex-col h-full px-4 py-6 min-w-[350px] overflow-y-auto">
            <form method="xhr::post" action="
                {% if article is not null %} 
                    {{ '/article/endpoint/update' | admin_url }} 
                {% else %} 
                    {{ '/article/endpoint/create' | admin_url }} 
                {% endif %}" class="w-full h-full pb-4">

                <div>
                    <header class="flex items-center gap-4 mb-4">
                        <button
                            class="lg:hidden sidebar-toggle w-[35px] h-[35px] flex items-center justify-center border aspect-square rounded">
                            <i class="fa-solid fa-chevron-right"></i>
                        </button>
                        <h2 class="text-2xl font-bold">Article Property</h2>
                    </header>

                </div>
                <div>
                    {% if options['thubnails-enable'] %}
                    <div class="mb-3">
                        <label>
                            <span class="block text-sm font-medium text-gray-700 mb-2">Thubnail</span>
                            <input id="article-thumbnail" name="thumbnail" type="file" class="form-input"
                                invalid-message="this field is required" placeholder="Select file" required>
                        </label>
                    </div>
                    {% endif %}
                </div>


                <div>
                    <div class="mb-3">
                        <label>
                            <span class="block text-sm font-medium text-gray-700 mb-2">Title of
                                article</span>
                            <input id="article-title" name="title" type="text" class="form-input" min="5"
                                placeholder="Enter title" invalid-message="this field is required" required>
                        </label>
                        <div id="article-title-autocomplete"></div>
                    </div>
                </div>

                <div>
                    <div class="mb-3">
                        <label>
                            <span class="block text-sm font-medium text-gray-700 mb-2">Slug</span>
                            <input id="article-slug" name="slug" type="text" class="form-input" min="5"
                                invalid-message="this field is required" placeholder="Enter slug">
                        </label>
                        <small class="text-disabled">Link format : <i>{{
                                options.links_style_format[options.link_format] }}</i></small>
                    </div>
                </div>

                <div>
                    <div class="mb-3">
                        <label>
                            <span class="block text-sm font-medium text-gray-700 mb-2">Category of
                                article</span>
                            <select id="article-category" name="category" class="form-select">
                                {% for category in categories %}
                                <option value="{{ category.id }}">{{ category.name }}</option>
                                {% endfor %}
                            </select>
                        </label>
                    </div>
                </div>

                <div>
                    <div class="mb-3">
                        <label>
                            <input onchange="showCustomDescription(this)" type="checkbox" class="form-input switch mr-3"
                                id="is-custom-description" value="1"> Custom
                            description</label>
                        <label style="display: none;">
                            <span class="block text-sm font-medium text-gray-700 mb-2">Description</span>
                            <textarea id="article-description" name="description" class="form-textarea"
                                placeholder="Enter description"
                                invalid-message="this field is required, minimum 150 characters" min="150"></textarea>
                        </label>
                    </div>
                </div>

                <div>
                    <div class="mb-3">
                        <label>
                            <input type="checkbox" class="form-input switch mr-3" id="is-publish" name="is-publish"
                                value="1" checked> Publish</label>
                    </div>
                </div>

                <div>
                    <div class="mb-3 hidden">
                        <input type="hidden" id="article-content" name="content">
                    </div>
                </div>
                <div>
                    <div class="mb-3 hidden">
                        <input type="hidden" id="article-id" name="id">
                    </div>
                </div>

                <div>
                    <button id="btn-save" type="submit" class="btn btn-primary w-full my-5">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}

{% block javascript %}

{{ parent() }}

{% if article is not null %}

<script>
    const article = JSON.parse(`{{ article | json_encode | replace({"\\": "\\\\"}) | raw }}`);
    $(() => {
        $("#article-title").val(article.title);
        $("#article-slug").val(article.slug);
        $("#article-category").val(article.category_id);
        $("#article-description").val(article.description);
        $("#article-id").val(article.id);
        $("#is-publish").prop("checked", article.status == 1);
    });

</script>
{% endif %}

<script>
    function showCustomDescription(checkbox) {
        if ($(checkbox).is(":checked")) {
            $("#article-description").parent().fadeIn({
                complete: () => {
                    $("#article-description").focus();
                }
            });
            $("#article-description").attr('required', true);
        } else {
            $("#article-description").parent().fadeOut();
            $("#article-description").attr('required', false);
        }
    }


    $(function () {

        const title = $("#article-title");
        const slug = $("#article-slug");

        const editorOpt = {
            holder: "#editor",
        }
        if (article && article.content.json) {
            editorOpt.data = article.content.json
        }

        const editor = merapi.editor.init({
            editor: editorOpt,
            event: {
                onChange: (api, evt) => {
                    editor.save().then(output => {
                        $("#article-content").val(JSON.stringify(output));
                    });
                },
                onReady: (api, evt) => {
                    editor.save().then(output => {
                        $("#article-content").val(JSON.stringify(output));
                    })
                }
            }
        });


        $("form").on("xhr::success", function (evt, data) {

            $("#article-id").val(data.result.data.id);
            merapi.toast(data.message, 5, "text-success");
        });
        $("form").on("xhr::error", function (evt, data) {
            merapi.toast(data.message, 5, "text-danger");
        });

        title.on("input", () => {
            showAutocompletion(title.val().trim());
            slug.val(slugify(title.val().trim()));
        });





        function showAutocompletion(_title) {

            editor.save().then(output => {
                // Levenshtein Distance function to calculate similarity
                function levenshteinDistance(a, b) {
                    const matrix = [];

                    for (let i = 0; i <= b.length; i++) {
                        matrix[i] = [];
                    }

                    for (let i = 0; i <= a.length; i++) {
                        matrix[0][i] = i;
                    }

                    for (let i = 1; i <= b.length; i++) {
                        for (let j = 1; j <= a.length; j++) {
                            let minDistance = Infinity;

                            for (let k = 0; k < i; k++) {
                                minDistance = Math.min(minDistance, matrix[k][j - 1] + 1);
                            }

                            for (let k = 0; k < j; k++) {
                                minDistance = Math.min(minDistance, matrix[i - 1][k] + 1);
                            }

                            for (let k = 0; k < i && k < j; k++) {
                                minDistance = Math.min(minDistance, matrix[k][j - 1] + (a[k] === b[k] ? 0 : 1));
                            }

                            matrix[i][j] = minDistance;
                        }
                    }

                    return matrix[b.length][a.length];
                }


                // Adjusted to process and sort suggestions based on similarity
                const suggests = output.blocks.reduce((acc, { type, data: { text } }) => {
                    text = text.replace(/&nbsp;/g, '').replace(/&amp;/g, '&');

                    if (type === 'header' && new RegExp(_title.trim(), 'gi').test(text)) {
                        acc.push(text);
                    }

                    return acc;
                }, []);

                // Sort suggestions by similarity (lower distance means more similar)
                suggests.sort((a, b) => levenshteinDistance(_title, a) - levenshteinDistance(_title, b));

                // limit the number of suggestions
                if (suggests.length > 5) suggests.splice(5);

                const holder = $("#article-title-autocomplete").html("<span class='w-full text-sm text-gray-700 font-semibold'>Suggestions:</span>");
                $("<div class='autocomplete-container text-sm'>").appendTo(holder);

                suggests.forEach(val => {
                    let item = $("<div class='autocomplete-item'>");
                    item.html(val.replace((new RegExp(_title.trim(), 'gi')), `<span style='color: #b88f14;'>$&</span>`)).appendTo(holder.find(".autocomplete-container"));
                    item.on("click", () => {
                        title.val(val);
                        slug.val(slugify(val));
                        holder.html("");
                    })
                });
            });
        }


        function trimChars(str, char) {
            const regex = new RegExp(`^${char}+|${char}+$`, 'g');
            return str.replace(regex, '');
        }


        function slugify(text) {
            return (text.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '')).replace(/^[^a-z]+|[^a-z]+$/g, '');
        }


        // Function to handle click events on the document
        function handleDocumentClick(e) {
            // Check if the clicked element is not within the .content-sidebar or .sidebar-toggle
            if (!$(e.target).closest('.content-sidebar, .sidebar-toggle').length) {
                // Clicked outside, add the "close" class to .content-sidebar
                $(".content-sidebar").addClass("close");
                // Remove the click event listener from the document
                $(document).off("click", handleDocumentClick);
            }
        }

        // Click event handler for .sidebar-toggle
        $(".sidebar-toggle").on("click", function (e) {
            // Toggle the "close" class on .content-sidebar
            $(".content-sidebar").toggleClass("close");
            // Stop the click event from bubbling up to the document
            e.stopPropagation();
            // Add a click event listener to the document
            $(document).on("click", handleDocumentClick);
        });
    })
</script>
{% endblock %}

{# {% block body %}

<body class="bg-slate-100">
    <main>
        <section>
            <header class="sticky top-0 shadow-md bg-white p-3 h-[60px] flex z-10 items-center">
                <a href="{{ 'article' | admin_url }}" class="btn btn-link">Back</a>
                <h1 class="ms-3 text-xl font-bold">Article Editor</h1>
                <button
                    class="lg:hidden ms-auto sidebar-toggle w-[35px] h-[35px] flex items-center justify-center border aspect-square rounded"><i
                        class="fa-solid fa-chevron-left"></i></button>
            </header>


        </section>
    </main>



    {% block javascript %}

    {{ parent() }}

    {% if article is not null %}

    <script>
        const article = JSON.parse(`{{ article | json_encode | replace({"\\": "\\\\"}) | raw }}`);
        $(() => {
            $("#article-title").val(article.title);
            $("#article-slug").val(article.slug);
            $("#article-category").val(article.category_id);
            $("#article-description").val(article.description);
            $("#article-id").val(article.id);
            $("#is-publish").prop("checked", article.status == 1);
        });

    </script>
    {% endif %}

    <script>
        function showCustomDescription(checkbox) {
            if ($(checkbox).is(":checked")) {
                $("#article-description").parent().fadeIn({
                    complete: () => {
                        $("#article-description").focus();
                    }
                });
                $("#article-description").attr('required', true);
            } else {
                $("#article-description").parent().fadeOut();
                $("#article-description").attr('required', false);
            }
        }


        $(function () {

            const title = $("#article-title");
            const slug = $("#article-slug");

            const editorOpt = {
                holder: "#editor",
            }
            if (article && article.content.json) {
                editorOpt.data = article.content.json
            }

            const editor = merapi.editor.init({
                editor: editorOpt,
                event: {
                    onChange: (api, evt) => {
                        editor.save().then(output => {
                            $("#article-content").val(JSON.stringify(output));
                        });
                    },
                    onReady: (api, evt) => {
                        editor.save().then(output => {
                            $("#article-content").val(JSON.stringify(output));
                        })
                    }
                }
            });


            $("form").on("xhr::success", function (evt, data) {

                $("#article-id").val(data.result.data.id);
                merapi.toast(data.message, 5, "text-success");
            });
            $("form").on("xhr::error", function (evt, data) {
                merapi.toast(data.message, 5, "text-danger");
            });

            title.on("input", () => {
                showAutocompletion(title.val().trim());
                slug.val(slugify(title.val().trim()));
            });





            function showAutocompletion(_title) {

                editor.save().then(output => {
                    // Levenshtein Distance function to calculate similarity
                    function levenshteinDistance(a, b) {
                        const matrix = [];

                        for (let i = 0; i <= b.length; i++) {
                            matrix[i] = [];
                        }

                        for (let i = 0; i <= a.length; i++) {
                            matrix[0][i] = i;
                        }

                        for (let i = 1; i <= b.length; i++) {
                            for (let j = 1; j <= a.length; j++) {
                                let minDistance = Infinity;

                                for (let k = 0; k < i; k++) {
                                    minDistance = Math.min(minDistance, matrix[k][j - 1] + 1);
                                }

                                for (let k = 0; k < j; k++) {
                                    minDistance = Math.min(minDistance, matrix[i - 1][k] + 1);
                                }

                                for (let k = 0; k < i && k < j; k++) {
                                    minDistance = Math.min(minDistance, matrix[k][j - 1] + (a[k] === b[k] ? 0 : 1));
                                }

                                matrix[i][j] = minDistance;
                            }
                        }

                        return matrix[b.length][a.length];
                    }


                    // Adjusted to process and sort suggestions based on similarity
                    const suggests = output.blocks.reduce((acc, { type, data: { text } }) => {
                        text = text.replace(/&nbsp;/g, '').replace(/&amp;/g, '&');

                        if (type === 'header' && new RegExp(_title.trim(), 'gi').test(text)) {
                            acc.push(text);
                        }

                        return acc;
                    }, []);

                    // Sort suggestions by similarity (lower distance means more similar)
                    suggests.sort((a, b) => levenshteinDistance(_title, a) - levenshteinDistance(_title, b));

                    // limit the number of suggestions
                    if (suggests.length > 5) suggests.splice(5);

                    const holder = $("#article-title-autocomplete").html("<span class='w-full text-sm text-gray-700 font-semibold'>Suggestions:</span>");
                    $("<div class='autocomplete-container text-sm'>").appendTo(holder);

                    suggests.forEach(val => {
                        let item = $("<div class='autocomplete-item'>");
                        item.html(val.replace((new RegExp(_title.trim(), 'gi')), `<span style='color: #b88f14;'>$&</span>`)).appendTo(holder.find(".autocomplete-container"));
                        item.on("click", () => {
                            title.val(val);
                            slug.val(slugify(val));
                            holder.html("");
                        })
                    });
                });
            }


            function trimChars(str, char) {
                const regex = new RegExp(`^${char}+|${char}+$`, 'g');
                return str.replace(regex, '');
            }


            function slugify(text) {
                return (text.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '')).replace(/^[^a-z]+|[^a-z]+$/g, '');
            }


            // Function to handle click events on the document
            function handleDocumentClick(e) {
                // Check if the clicked element is not within the .content-sidebar or .sidebar-toggle
                if (!$(e.target).closest('.content-sidebar, .sidebar-toggle').length) {
                    // Clicked outside, add the "close" class to .content-sidebar
                    $(".content-sidebar").addClass("close");
                    // Remove the click event listener from the document
                    $(document).off("click", handleDocumentClick);
                }
            }

            // Click event handler for .sidebar-toggle
            $(".sidebar-toggle").on("click", function (e) {
                // Toggle the "close" class on .content-sidebar
                $(".content-sidebar").toggleClass("close");
                // Stop the click event from bubbling up to the document
                e.stopPropagation();
                // Add a click event listener to the document
                $(document).on("click", handleDocumentClick);
            });
        })
    </script>
    {% endblock %}


</body>
{% endblock %} #}