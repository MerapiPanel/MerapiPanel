/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmerapipanel"] = self["webpackChunkmerapipanel"] || []).push([["src_base_assets_merapi_js"],{

/***/ "./src/base/assets/merapi.js?6129":
/*!*******************************************!*\
  !*** ./src/base/assets/merapi-exposed.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var ___EXPOSE_LOADER_IMPORT___ = __webpack_require__(/*! -!./merapi.js */ \"./src/base/assets/merapi.js?e311\");\nvar ___EXPOSE_LOADER_GET_GLOBAL_THIS___ = __webpack_require__(/*! ../../../node_modules/expose-loader/dist/runtime/getGlobalThis.js */ \"./node_modules/expose-loader/dist/runtime/getGlobalThis.js\");\nvar ___EXPOSE_LOADER_GLOBAL_THIS___ = ___EXPOSE_LOADER_GET_GLOBAL_THIS___;\n___EXPOSE_LOADER_GLOBAL_THIS___[\"merapi\"] = ___EXPOSE_LOADER_IMPORT___;\nmodule.exports = ___EXPOSE_LOADER_IMPORT___;\n\n\n//# sourceURL=webpack://merapipanel/./src/base/assets/merapi.js?");

/***/ }),

/***/ "./src/base/assets/merapi.js?e311":
/*!***********************************!*\
  !*** ./src/base/assets/merapi.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   cookie: () => (/* binding */ cookie),\n/* harmony export */   createModal: () => (/* binding */ createModal),\n/* harmony export */   dialog: () => (/* binding */ dialog),\n/* harmony export */   http: () => (/* binding */ http),\n/* harmony export */   toast: () => (/* binding */ toast)\n/* harmony export */ });\n/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery-exposed.js\");\n\r\nconst proggressbars = $(`<div class='http-progress'><div class='download running-strip'></div><div class='upload running-strip'></div></div>`);\r\nvar isOnAjax = false;\r\n$(document).on(\"ajaxSend\", function (e) {\r\n    $(document.body).append(proggressbars);\r\n}).on(\"ajaxComplete\", function () {\r\n    $('.http-progress').remove();\r\n    isOnAjax = false;\r\n});\r\n\r\n\r\nfunction createXmlHttpRequest() {\r\n\r\n    // if (isOnAjax) {\r\n    //     Toast.create('Please wait...', 'hsl(51, 50%, 45%)', 10);\r\n    //     return false;\r\n    // }\r\n\r\n    isOnAjax = true;\r\n\r\n    proggressbars.css({ position: 'fixed', width: '100%', height: '5px', 'background-color': '#00000000', 'box-shadow': '0 1px 2px #00000045', top: 0, 'z-index': 99 })\r\n    proggressbars.find('.download').css({ transision: '1s', position: 'absolute', top: 0, width: '0%', height: '100%', 'background-color': '#0091ff', 'z-index': 2 })\r\n    proggressbars.find('.upload').css({ transision: '1s', position: 'absolute', top: 0, width: '5%', height: '100%', 'background-color': '#eaeaea', 'z-index': 1 })\r\n\r\n    const xhr = new XMLHttpRequest();\r\n\r\n    xhr.addEventListener(\"progress\", function (evt) {\r\n        if (evt.lengthComputable) {\r\n            let complete = (evt.loaded / evt.total * 100 | 0);\r\n            $('.http-progress').find('.download').css('width', `${complete}%`);\r\n            isOnAjax = false;\r\n        }\r\n    });\r\n\r\n    xhr.upload.addEventListener(\"progress\", (evt) => {\r\n        if (evt.lengthComputable) {\r\n            let complete = Math.ceil((evt.loaded / evt.total) * 100);\r\n            $('.http-progress').find('.upload').css('width', `${complete}%`);\r\n        }\r\n    });\r\n    return xhr;\r\n}\r\n\r\n/**\r\n * Creates a modal with the specified title, content, and action buttons.\r\n *\r\n * @param {string} title - The title of the modal.\r\n * @param {string} content - The content of the modal body.\r\n * @param {Object} [action] - Optional settings for the action buttons.\r\n * @param {Object} [action.positive] - The settings for the positive action button.\r\n * @param {string} [action.positive.text] - The text to display on the positive action button.\r\n * @param {string} [action.positive.class] - The CSS class to apply to the positive action button.\r\n * @param {function} [action.positive.callback] - The callback function to execute when the positive action button is clicked.\r\n * @param {Object} [action.negative] - The settings for the negative action button.\r\n * @param {string} [action.negative.text] - The text to display on the negative action button.\r\n * @param {string} [action.negative.class] - The CSS class to apply to the negative action button.\r\n * @param {function} [action.negative.callback] - The callback function to execute when the negative action button is clicked.\r\n * @return {Object} The created modal object.\r\n */\r\nconst createModal = (title, content, action = {\r\n    positive: {\r\n        text: 'Ok',\r\n        class: 'btn btn-primary',\r\n        callback: null\r\n    },\r\n    negative: {\r\n        text: 'Close',\r\n        class: 'btn btn-secondary',\r\n        callback: null\r\n    }\r\n}) => {\r\n\r\n    const element = $(\r\n        `<div class='modal' style='display: none;'>\r\n            <div class='modal-dialog'>\r\n                <div class='modal-header'>\r\n                    <h5 class='modal-title'>${title}</h5>\r\n                    <button type='button' class='btn-close'><i class='fa-solid fa-xmark'></i></button>\r\n                </div>\r\n                <div class='modal-content'></div>\r\n                <div class='modal-footer'>\r\n                    <button data-modal-act='negative' type='button' class='btn btn-secondary'>Close</button>\r\n                    <button data-modal-act='positive' type='button' class='btn btn-primary'>Save changes</button>\r\n                </div>\r\n            </div>\r\n        </div>`);\r\n\r\n    const dialog = element.find('.modal-dialog');\r\n    const header = element.find('.modal-header');\r\n    const footer = element.find('.modal-footer');\r\n    const body = element.find('.modal-content');\r\n    const close = element.find('.btn-close');\r\n    const btnPositive = element.find('[data-modal-act=\"positive\"]');\r\n    const btnNegative = element.find('[data-modal-act=\"negative\"]');\r\n\r\n    body.append(content);\r\n\r\n    if (!action.positive) {\r\n        btnPositive.remove();\r\n    } else {\r\n        btnPositive.text(action.positive.text);\r\n        btnPositive.addClass(action.positive.class);\r\n        btnPositive.on('click', () => {\r\n            if (action.positive.callback) {\r\n                action.positive.callback();\r\n            } else {\r\n                modal.hide();\r\n            }\r\n        })\r\n    }\r\n\r\n    if (!action.negative) {\r\n        btnNegative.remove();\r\n    } else {\r\n        btnNegative.text(action.negative.text);\r\n        btnNegative.addClass(action.negative.class);\r\n        btnNegative.on('click', () => {\r\n            if (action.negative.callback) {\r\n                action.negative.callback();\r\n            } else {\r\n                modal.hide();\r\n            }\r\n        })\r\n    }\r\n\r\n    close.on('click', () => {\r\n        modal.hide();\r\n    });\r\n\r\n    $(document.body).append(element);\r\n\r\n    function show() {\r\n        element.fadeIn();\r\n        $(document).trigger(\"modal:show\");\r\n    }\r\n    function hide() {\r\n        element.fadeOut({\r\n            complete: () => {\r\n                element.remove();\r\n                $(document).trigger(\"modal:hide\");\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets the action for the given type of button.\r\n     *\r\n     * @param {string} act - The type of button action ('positive' or 'negative')\r\n     * @param {Object} [opt] - Optional settings for the button\r\n     * @param {string} [opt.text] - The text to display on the button\r\n     * @param {string} [opt.class] - The CSS class to apply to the button\r\n     * @param {function} [opt.callback] - The callback function to execute when the button is clicked\r\n     */\r\n    function setAction(act, opt = {\r\n        text: null,\r\n        class: null,\r\n        callback: null\r\n    }) {\r\n        if (act == 'positive' || act == '+') {\r\n\r\n            btnPositive.text(opt.text ?? btnPositive.text());\r\n            btnPositive.addClass(opt.class ?? btnPositive.attr('class'));\r\n            btnPositive.off('click').on('click', () => {\r\n                if (opt.callback) {\r\n                    opt.callback();\r\n                } else {\r\n                    modal.hide();\r\n                }\r\n            })\r\n        } else if (act == 'negative' || act == '-') {\r\n            btnNegative.text(opt.text ?? btnNegative.text());\r\n            btnNegative.addClass(opt.class ?? btnNegative.attr('class'));\r\n            btnNegative.off('click').on('click', () => {\r\n                if (opt.callback) {\r\n                    opt.callback();\r\n                } else {\r\n                    modal.hide();\r\n                }\r\n            })\r\n        } else throw new Error('Invalid action');\r\n    }\r\n\r\n    /**\r\n     * Sets the title of the modal header.\r\n     *\r\n     * @param {string} title - The title to be set.\r\n     * @return {void} This function does not return a value.\r\n     */\r\n    function setTitle(title) {\r\n        if (header.find('h5')) {\r\n            header.find('h5').text(title);\r\n        } else {\r\n            header.prepend(`<h5 class='modal-title'>${title}</h5>`);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the content of the body element.\r\n     *\r\n     * @param {string} content - The new content to be set.\r\n     */\r\n    function setContent(content) {\r\n        body.html(content);\r\n    }\r\n\r\n    const modal = {\r\n        container: {\r\n            element: element,\r\n            dialog: dialog,\r\n            header: header,\r\n            body: body,\r\n            footer: footer,\r\n            action: {\r\n                positive: btnPositive,\r\n                negative: btnNegative\r\n            }\r\n        },\r\n        show: show,\r\n        hide: hide,\r\n        setAction: setAction,\r\n        setTitle: setTitle,\r\n        setContent: setContent\r\n    }\r\n\r\n    return modal;\r\n}\r\n\r\n\r\n\r\nconst ObjectToast = {\r\n    create: function (text = \"\", textColor = \"#0000ff45\", seconds = 3) {\r\n        let unlimit = false;\r\n        if (seconds == null) {\r\n            seconds = 3;\r\n            unlimit = true;\r\n        }\r\n\r\n        if (!this.enable) return;\r\n        this.enable = false;\r\n        setTimeout(() => this.enable = true, 400)\r\n\r\n        let max = 5;\r\n        let posY = 100;\r\n        let toast = $(`<toast style='background: white; width: 100%; transition: 0.25s; max-width: 350px; box-shadow: 0 0 4px #00000044; padding: 15px 35px 15px 15px;position: fixed;top: 100vh;right: -3000px;border-radius: 0.3rem;z-index: 900;'>`)\r\n        if (/\\-/g.test(textColor)) {\r\n            toast.addClass(textColor);\r\n        } else {\r\n            toast.css(\"color\", textColor);\r\n        }\r\n        let icon = $(`<icon style='display: inline-flex;border: 1px solid;border-radius: 5rem;width: 1.75rem;height: 1.75rem;justify-content: center;align-items: center;transform: rotate(-15deg);margin: 0 10px 0 0;'><i class=\"fa-solid fa-exclamation\"></i></icon>`)\r\n        let message = $(`<message>${text}</message>`)\r\n        let close = $(`<btn type='button' style=\"position: absolute;top: 0;right: 0;color: #ff000078;padding: 0.5rem;\"><i class=\"fa-solid fa-x\"></i></btn>`)\r\n        let progress = $(`<div class=\"progress\" style='position: absolute;overflow:hidden;width: 100%;height: 4px;left: 0;bottom: -1px;'><div class=\"progress-bar progress-bar-striped progress-bar-animated\" role=\"progressbar\" style=\"width: 100%\" aria-valuemax=\"100\"></div></div>`)\r\n     \r\n        toast.append(icon, message, close, progress)\r\n\r\n        let lastToasts = $(\"toast\")\r\n        if (lastToasts.length > max) {\r\n            return;\r\n        }\r\n\r\n\r\n\r\n        for (let i = 0; i < lastToasts.length; i++) {\r\n            let lastToast = lastToasts[i];\r\n            posY += (lastToast.offsetHeight) + 10;\r\n        }\r\n        toast.css(\"top\", posY + \"px\")\r\n\r\n\r\n        $(document.body).append(toast)\r\n\r\n        let progressbar = progress.find(\".progress-bar\");\r\n        progressbar.css(\"transition\", `${seconds}s`)\r\n        setTimeout(() => {\r\n            toast.css(\"right\", 25 + \"px\")\r\n            progressbar.css(\"width\", \"0%\")\r\n        }, 50)\r\n\r\n        let delay = 1000 * seconds;\r\n        if (!unlimit) {\r\n            let timeOut = setTimeout(() => {\r\n                toast.remove()\r\n                this.control()\r\n            }, delay)\r\n\r\n            close.on(\"click\", () => {\r\n                toast.remove();\r\n                clearTimeout(timeOut)\r\n            })\r\n        }\r\n\r\n        close.on(\"click\", () => {\r\n            toast.remove();\r\n        })\r\n    },\r\n\r\n\r\n    enable: true,\r\n\r\n\r\n    control: function () {\r\n        let lastToasts = $(\"toast\")\r\n        let posY = 100;\r\n        for (let i = 0; i < lastToasts.length; i++) {\r\n            let lastToast = $(lastToasts[i]);\r\n            let Y = Number(lastToast.css(\"top\").replace(/[^0-9]+/gi, ''))\r\n            lastToast.css(\"top\", posY + \"px\");\r\n            posY = Y\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst toast = ObjectToast.create;\r\n\r\nconst http = {\r\n    get: function (url) {\r\n\r\n        return $.ajax({\r\n            xhr: createXmlHttpRequest,\r\n            url: url,\r\n            method: 'GET',\r\n            processData: false,\r\n            contentType: false,\r\n            cache: false\r\n        })\r\n    },\r\n    post: function (url, data) {\r\n        return $.ajax({\r\n            xhr: createXmlHttpRequest,\r\n            url: url,\r\n            method: 'POST',\r\n            data: data,\r\n            processData: false,\r\n            contentType: false,\r\n            cache: false\r\n        })\r\n    },\r\n    put: function (url, data) {\r\n        return $.ajax({\r\n            xhr: createXmlHttpRequest,\r\n            url: url,\r\n            method: 'PUT',\r\n            data: data,\r\n            processData: false,\r\n            contentType: false,\r\n            headers: { 'X-HTTP-Method-Override': 'PUT' },\r\n            cache: false\r\n        })\r\n    },\r\n    patch: function (url, data) {\r\n        return $.ajax({\r\n            xhr: createXmlHttpRequest,\r\n            url: url,\r\n            method: 'PATCH',\r\n            data: data,\r\n            processData: false,\r\n            contentType: false,\r\n            headers: { 'X-HTTP-Method-Override': 'PATCH' }\r\n        })\r\n    },\r\n    delete: function (url, data) {\r\n        return $.ajax({\r\n            xhr: createXmlHttpRequest,\r\n            url: url,\r\n            method: 'DELETE',\r\n            data: data,\r\n            processData: false,\r\n            contentType: false,\r\n            headers: { 'X-HTTP-Method-Override': 'DELETE' }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nconst cookie = {\r\n    set: function (name, value, exdays) {\r\n        const d = new Date();\r\n        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\r\n        let expires = \"expires=\" + d.toUTCString();\r\n        document.cookie = name + \"=\" + value + \";\" + expires + \";path=/\";\r\n    },\r\n    get: function (name) {\r\n        let nameEQ = name + \"=\";\r\n        let ca = document.cookie.split(';');\r\n        for (let i = 0; i < ca.length; i++) {\r\n            let c = ca[i];\r\n            while (c.charAt(0) === ' ') {\r\n                c = c.substring(1, c.length);\r\n            }\r\n            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\r\n        }\r\n        return null;\r\n    },\r\n    delete: function (name) {\r\n        cookie.set(name, \"\", -1);\r\n    }\r\n}\r\n\r\n\r\nconst dialog = {\r\n    confirm: function (title, message) {\r\n\r\n        const modal = createModal(title, message);\r\n\r\n        return new Promise(resolve => {\r\n            modal.setAction('+', {\r\n                text: 'Yes',\r\n                callback: () => {\r\n                    modal.hide();\r\n                    resolve(true);\r\n                }\r\n            })\r\n            modal.setAction('-', {\r\n                text: 'No',\r\n                callback: () => {\r\n                    modal.hide();\r\n                    resolve(false);\r\n                }\r\n            })\r\n\r\n            modal.show();\r\n        });\r\n    },\r\n\r\n    confirmDanger: function (title, message) {\r\n        const modal = createModal(title, message);\r\n\r\n        return new Promise(resolve => {\r\n\r\n            const positive = $(modal.container.action.positive);\r\n            const negative = $(modal.container.action.negative);\r\n            positive.addClass(\"btn btn-danger\")\r\n            positive.text(\"Continue\")\r\n            positive.on(\"click\", () => resolve(true))\r\n            negative.addClass(\"btn btn-primary\")\r\n            negative.removeClass(\"btn-secondary\")\r\n            negative.text(\"Cancel\")\r\n            negative.on(\"click\", () => resolve(false))\r\n            modal.show();\r\n        });\r\n    }\r\n}\r\n\r\nconst assign = function (name, obj) {\r\n    Object.assign(this, { [name]: obj });\r\n}\r\n\r\n$.ajax({\r\n    error: (e) => {\r\n        if (e.responseJSON && e.responseJSON.message) {\r\n            Toast.create(e.responseJSON.message, 'text-' + (e.code >= 401 ? 'danger' : 'warning'), 10);\r\n        } else {\r\n            Toast.create(e.statusText || e.responseText, 'text-' + (e.code >= 401 ? 'danger' : 'warning'), 10);\r\n        }\r\n    }\r\n})\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://merapipanel/./src/base/assets/merapi.js?");

/***/ })

}]);